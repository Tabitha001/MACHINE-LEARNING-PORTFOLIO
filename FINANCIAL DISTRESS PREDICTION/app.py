# -*- coding: utf-8 -*-
"""app

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bbEZy0yyi9t8SnEOwg9g9UcHZgHlT7at
"""

pip install streamlit

!pip install pyngrok

import pickle
from pyngrok import ngrok
import streamlit as st

from google.colab import drive
drive.mount('/content/drive')

# Load the saved model from Google Drive
with open("/content/drive/MyDrive/random_forest_model.pkl", "rb") as f:
    model = pickle.load(f)


# Load the saved scaler from Google Drive
with open("/content/drive/MyDrive/Robust_scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

def welcome():
  return Hi

def predict_financial_distress(Shareholder_Concentration_in_percentage, Independence_Indicator,
       CEO_Duality, Board_of_Directors_Size,
       Director_Remuneration_in_million_Euros, Corporate_Borrowing,
       Company_Age, Retained_Earnings,
       Interest_Paid):

    scaled = scaler.fit_transform([Shareholder_Concentration_in_percentage, Independence_Indicator,
       CEO_Duality, Board_of_Directors_Size,
       Director_Remuneration_in_million_Euros, Corporate_Borrowing,
       Company_Age, Retained_Earnings,
       Interest_Paid])

    prediction = model.predict([scaled])

    print(prediction)
    return prediction

def main():
    # Webpage title
    st.title("Financial Distress Prediction")

    # Front end elements of the web page
    # The font and background color, padding, and text to be displayed
    html_temp = """
    <div style ="background-color: blue; padding: 13px">
    <h1 style ="color: black; text-align: center;">Streamlit Financial Distress Prediction ML App</h1>
    </div>
    """

    # Display the front end aspects
    st.markdown(html_temp, unsafe_allow_html=True)

    # Data required to make the prediction
    Shareholder_Concentration_in_percentage = st.number_input('Shareholder Concentration in percentage(%):')
    Independence_Indicator = st.number_input('Independence Indicator (on a scale of 1-10):', min_value=1, max_value=10)
    CEO_Duality = st.selectbox('Does the CEO of your company also serve as the chairman of the board of directors? (0 = NO, 1 = YES):', [0, 1])
    Board_of_Directors_Size = st.number_input('Board of Directors Size (in Figures):')
    Director_Remuneration_in_million_Euros = st.number_input('Director Remuneration (in million Euros (£million):)')
    Corporate_Borrowing = st.selectbox('Corporate Borrowing (0 = NO, 1 = YES):', [0, 1])
    Company_Age = st.number_input('Company Age (in years)')
    Retained_Earnings = st.number_input('Retained Earnings (£)')
    Interest_Paid = st.number_input('Interest Paid (£)')

    if st.button("Predict"):
        # Call the function that predicts financial distress
        prediction_result = predict_financial_distress(Shareholder_Concentration_in_percentage, Independence_Indicator,
                                                       CEO_Duality, Board_of_Directors_Size,
                                                       Director_Remuneration_in_million_Euros, Corporate_Borrowing,
                                                       Company_Age, Retained_Earnings,
                                                       Interest_Paid)

        if prediction_result == 1:
            result = 'Warning: Financial Distress Detected'
        else:
            result = 'No Indication of Financial Distress Detected'

        st.success(result)

if __name__ == '__main__':
    main()

